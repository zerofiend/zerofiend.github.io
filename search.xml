<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="146-LRU-缓存"><a href="#146-LRU-缓存" class="headerlink" title="146. LRU 缓存"></a>146. LRU 缓存</h1><p><a href="https://leetcode.cn/problems/lru-cache/">146. LRU 缓存 - 力扣（Leetcode）</a></p><p>LRU：是最近最少使用（最长时间）淘汰算法（Least Recently Used）。淘汰最长时间没有被使用的页面。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>容量 capacity：用于记录当前缓存的容量。</p><p>get(int key)：用于获取缓存中的某个数据。</p><ul><li>key存在，返回val</li><li>key不存在，返回-1</li></ul><p>put(int key, int value)：用于将某个数据写入缓存。</p><ul><li>key已存在，修改对应的val</li><li>key不存在，写入缓存，写入前缓存已经达到容量上限，则删除最末尾的缓存数据</li></ul><h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><p>每次 put 或者 get 操作时将元素从有序的哈希表中删除再重新添加到头部，每次删除时删除有序哈希表的尾部元素。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>使用<strong>双向链表</strong>维护缓存的顺序结构，保证调用的时间顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节点</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> key, val;</span><br><span class="line">    <span class="keyword">public</span> Node next, prev;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> v)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = k;</span><br><span class="line">        <span class="built_in">this</span>.val = v;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<strong>哈希表</strong>保证在O(1)的时间复杂度内获取到缓存数据的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 哈希表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Map&lt;Integer, Node&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>get(int key)</p><ol><li>key存在：<ul><li>根据哈希表查出key对应的value（node节点）在双向链表中删除该节点，重新插入到链表头部。</li><li>返回该节点对应的value</li></ul></li><li>key不存在：<ul><li>返回-1</li></ul></li></ol><p>put(int key, int value)</p><ol><li>容量达到了上限<ul><li>删除双向链表的尾节点，并获取删除的节点的key</li><li>删除哈希表中key对应的映射关系</li><li>根据输入参数构造新的节点</li><li>将新的节点插入链表头部</li><li>将新的key和节点的映射关系存入哈希表</li></ul></li><li>容量没有达到上限<ul><li>根据输入参数构造新的节点</li><li>将新的节点插入链表头部</li><li>将新的key和节点的映射关系存入哈希表</li></ul></li></ol><h2 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h2><p>java中的 LinkedHashMap 集合容器拥有双向链表和哈希表的特性，可以直接用来实现LRU算法，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    LinkedHashMap&lt;Integer, Integer&gt; cache;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        cache = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cache.containsKey(key)) &#123;<span class="comment">// 如果key存在，则将key放到容器头部并返回val</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">val</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">            cache.remove(key);</span><br><span class="line">            cache.put(key, val);</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">// 如果key不存在，则返回-1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        get(key);<span class="comment">// 先调用get()方法将put的key调用一次，若存在则会被放到容器头部</span></span><br><span class="line">        cache.put(key, val);<span class="comment">// 将容器中key对应的val更新</span></span><br><span class="line">        <span class="keyword">if</span> (cache.size() &gt; capacity) &#123;<span class="comment">// 如果容器的大小大于capacity，则将尾部节点删除</span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">removeKey</span> <span class="operator">=</span> cache.keySet().iterator().next();</span><br><span class="line">            cache.remove(removeKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p align="right">2023.1.9</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="460-LFU-缓存"><a href="#460-LFU-缓存" class="headerlink" title="460. LFU 缓存"></a>460. LFU 缓存</h1><p><a href="https://leetcode.cn/problems/lfu-cache/">460. LFU 缓存 - 力扣（Leetcode）</a></p><p>LFU：最不经常使用（最少次）淘汰算法（Least Frequently Used）。淘汰一段时间使用次数最少的页面。</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>容量 capacity：用于记录当前缓存的容量。</p><p>get(int key)：用于获取缓存中的某个数据。</p><ul><li>key存在，返回val</li><li>key不存在，返回-1</li></ul><p>put(int key, int value)：用于将某个数据写入缓存。</p><ul><li>key存在，修改对应的val</li><li>key不存在，写入缓存，若写入前缓存已经达到容量上限，则应该淘汰使用次数最少的缓存</li><li>若使用次数最少的缓存不止一个，则应该淘汰最久未使用的缓存</li></ul><h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><p>每次调用 get 和 put 方法时将每个元素对应的调用次数 + 1，每次删除调用次数最少的元素列表中的尾部元素。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>使用HashMap存储key到val的映射，快速计算get(key)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, Integer&gt; keyToVal;</span><br></pre></td></tr></table></figure><p>使用HashMap存储key到freq的映射，快速获取当前key对应的使用频率</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, Integer&gt; keyToFreq;</span><br></pre></td></tr></table></figure><p>使用HashMap存储freq到keys的映射，快速获取当前freq下的所有key</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, LinkedHashSet&lt;Integer&gt;&gt; freqToKeys;</span><br></pre></td></tr></table></figure><p>使用Integer存储capacity（缓存容量）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> capacity;</span><br></pre></td></tr></table></figure><p>使用Integer存储minFreq（最少使用次数），快速获取当前使用最少的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> minFreq;</span><br></pre></td></tr></table></figure><h2 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h2><p>get(int val)</p><ol><li>key存在<ul><li>在 keyToFreq 中获取当前key对应的调用次数 freq</li><li>在 freqToKeys 里 freq 对应的keys中将key删除</li><li>如果当前 freq 对应的keys的数量为0，则删除 freqToKeys里 freq 对应的映射关系（防止查找时找到空数据）</li><li>在 freqToKeys 里查找 freq + 1 对应的keys，将 key 插入keys的头位置，若不存在 keys 则创建一个新的keys将key存入，最后存入 freqToKeys 的 freq + 1 位置</li><li>更新 minFreq 的值</li><li>更新 keyToFreq 中 key 对应的 freq（+1）</li></ul></li><li>key不存在<ul><li>返回 -1</li></ul></li></ol><p>put(int key, int val)</p><ol><li>key存在<ul><li>参考 get(int val) 中 key 存在的情况</li><li>将 keyToVal 中 key 对应的 val 更新成对应的新 val</li></ul></li><li>key不存在<ul><li>如果当前缓存容量已经到达上限<ul><li>在 freqToKeys 中获取 minFreq 对应的 keys</li><li>将其中的第一个 key 获取，作为将要删除的 key</li><li>将 keyToVal 中 key 对应的映射关系删除</li><li>将 keyToFreq 中 key 对应的映射关系删除</li><li>将 freqToKeys 中 对应的 keys 中的 key 删除</li><li>若此时的 keys 为空，则将 keys 从 freqToKeys 中删除</li></ul></li><li>如果当前容量没有达到上限<ul><li>在 keyToVal 中新增 key 和 val 的映射关系</li><li>在 ketToFreq 中新增 key 和 freq（1） 的映射关系</li><li>在 freqToKeys 中 freq &#x3D; 1 的头部添加 key</li><li>将 minFreq 的值设置为 1</li></ul></li></ul></li></ol><h2 id="Java代码实现"><a href="#Java代码实现" class="headerlink" title="Java代码实现"></a>Java代码实现</h2><p>在 freqToKeys 中需要每一个 freq 对应的 keys 都保证插入顺序，则可以利用 LinkedHashSet 来储存 keys</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LFUCache</span> &#123;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; keyToVal;</span><br><span class="line">    HashMap&lt;Integer, Integer&gt; keyToFreq;</span><br><span class="line">    HashMap&lt;Integer, LinkedHashSet&lt;Integer&gt;&gt; freqToKeys;</span><br><span class="line">    <span class="type">int</span> capacity;</span><br><span class="line">    <span class="type">int</span> minFreq;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LFUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        keyToVal = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        keyToFreq = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        freqToKeys = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        minFreq = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (keyToVal.containsKey(key)) &#123;    <span class="comment">//  如果存在key则将key对应的映射关系更新</span></span><br><span class="line">            increaseFreq(key);</span><br><span class="line">            <span class="keyword">return</span> keyToVal.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity &lt;= <span class="number">0</span>) <span class="keyword">return</span>;  <span class="comment">//  如果容量本身小于0，则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (keyToVal.containsKey(key)) &#123;  <span class="comment">//  如果存在这个key，则直接更新freq</span></span><br><span class="line">            increaseFreq(key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (keyToFreq.size() == capacity) &#123; <span class="comment">//  如果此时容量达到上限，则先将使用次数最少的key去除</span></span><br><span class="line">                removeMinFreqKey();</span><br><span class="line">            &#125;</span><br><span class="line">            keyToFreq.put(key, <span class="number">1</span>);  <span class="comment">//  将新的key添加到freq = 1 中</span></span><br><span class="line">            freqToKeys.putIfAbsent(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;());   <span class="comment">// 若freq=1的keys为空，则添加新的map</span></span><br><span class="line">            freqToKeys.get(<span class="number">1</span>).add(key);    <span class="comment">//  将新key添加到set集合中</span></span><br><span class="line">            <span class="built_in">this</span>.minFreq = <span class="number">1</span>;   <span class="comment">//  插入新的节点最小的freq一定为1</span></span><br><span class="line">        &#125;</span><br><span class="line">        keyToVal.put(key, val); <span class="comment">//  将key存入keyToVal</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increaseFreq</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">freq</span> <span class="operator">=</span> keyToFreq.get(key);<span class="comment">//  获取key对应的调用次数</span></span><br><span class="line">        keyToFreq.put(key, freq + <span class="number">1</span>);     <span class="comment">//  更新key的调用次数</span></span><br><span class="line">        freqToKeys.get(freq).remove(key);   <span class="comment">//  移除旧调用次数的set集合中的val</span></span><br><span class="line">        <span class="keyword">if</span> (freqToKeys.get(freq).isEmpty()) &#123; <span class="comment">//  如果旧调用次数的set集合为空，则去掉旧调用集合</span></span><br><span class="line">            freqToKeys.remove(freq);</span><br><span class="line">            <span class="keyword">if</span> (freq == minFreq) minFreq++; <span class="comment">//  如果这个freq正好是minFreq，则更新minFreq</span></span><br><span class="line">        &#125;</span><br><span class="line">        freqToKeys.putIfAbsent(freq + <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;());</span><br><span class="line">        freqToKeys.get(freq + <span class="number">1</span>).add(key);  <span class="comment">//  将key存入新调用集合</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeMinFreqKey</span><span class="params">()</span> &#123;</span><br><span class="line">        LinkedHashSet&lt;Integer&gt; minFreqKeysSet = freqToKeys.get(minFreq);    <span class="comment">//  获取目前最小freq对应的set集合</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">removeKey</span> <span class="operator">=</span> minFreqKeysSet.iterator().next();   <span class="comment">//  获取需要移除的 key</span></span><br><span class="line">        keyToVal.remove(removeKey);   <span class="comment">//  将key对应的val移除</span></span><br><span class="line">        keyToFreq.remove(removeKey);    <span class="comment">//  将key对应的freq移除</span></span><br><span class="line">        minFreqKeysSet.remove(removeKey);   <span class="comment">//  将set集合中对应的key移除</span></span><br><span class="line">        <span class="keyword">if</span> (minFreqKeysSet.isEmpty()) &#123;   <span class="comment">//  如果此时set集合大小为0，则移除</span></span><br><span class="line">            freqToKeys.remove(minFreq);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PS：特别注意，在 removeMinFreqKey() 方法中最后一行去除 freqToKeys 中的 minFreq 后不需要更新 minFreq 的值，因为该方法只在 put() 中使用过，而使用之后就更新了 minFreq 的值，所有不需要在方法最后重复更新了。</p><blockquote><p align="right">2023.1.9</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-53-II-0～n-1中缺失的数字"><a href="#剑指-Offer-53-II-0～n-1中缺失的数字" class="headerlink" title="剑指 Offer 53 - II. 0～n-1中缺失的数字"></a>剑指 Offer 53 - II. 0～n-1中缺失的数字</h1><p><a href="https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/description/">剑指 Offer 53 - II. 0～n-1中缺失的数字 - 力扣（Leetcode）</a></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>找出在长度为 n - 1元素唯一且元素的范围为[0, n - 1]的递增数组中缺少的那个数。</p><h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><p>直接通过遍历的方式，当数组下标 i 不等于当前下标对应的值时就是缺少的那个数。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>无额外数据结构</p><h2 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO Solution</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ZFiend</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2023.01.21 0:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">missingNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] != i) <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-53-I-在排序数组中查找数字-I"><a href="#剑指-Offer-53-I-在排序数组中查找数字-I" class="headerlink" title="剑指 Offer 53 - I. 在排序数组中查找数字 I"></a>剑指 Offer 53 - I. 在排序数组中查找数字 I</h1><p><a href="https://leetcode.cn/problems/zai-pai-xu-shu-zu-zhong-cha-zhao-shu-zi-lcof/description/">剑指 Offer 53 - I. 在排序数组中查找数字 I - 力扣（Leetcode）</a></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>统计 targe 在数组 nums 中出现的次数。</p><h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><p>通过二分查找的方式找出 target 在数组 nums 中的左右边界 left 和 right，则 target 出现的次数为 right - left + 1。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>无额外数据结构。</p><h2 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @Description TODO Solution</span><br><span class="line"> * @Author ZFiend</span><br><span class="line"> * @Create 2023.01.21 0:08</span><br><span class="line"> */</span><br><span class="line">public class Solution &#123;</span><br><span class="line">    public int search(int[] nums, int target) &#123;</span><br><span class="line">        int l = 0, r = nums.length - 1;</span><br><span class="line">        while (l &lt;= r) &#123;</span><br><span class="line">            int m = l + (r - l) / 2;</span><br><span class="line">            if (nums[m] &lt;= target) l = m + 1;</span><br><span class="line">            else r = m - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        if (r &gt;= 0 &amp;&amp; nums[r] != target) return 0;</span><br><span class="line">        int right = r;</span><br><span class="line">        l = 0;</span><br><span class="line">        r = nums.length - 1;</span><br><span class="line">        while (l &lt;= r) &#123;</span><br><span class="line">            int m = l + (r - l) / 2;</span><br><span class="line">            if (nums[m] &lt; target) l = m + 1;</span><br><span class="line">            else r = m - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        int left = l;</span><br><span class="line">        return right - left + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-50-第一个只出现一次的字符"><a href="#剑指-Offer-50-第一个只出现一次的字符" class="headerlink" title="剑指 Offer 50. 第一个只出现一次的字符"></a>剑指 Offer 50. 第一个只出现一次的字符</h1><p><a href="https://leetcode.cn/problems/di-yi-ge-zhi-chu-xian-yi-ci-de-zi-fu-lcof/description/">剑指 Offer 50. 第一个只出现一次的字符 - 力扣（Leetcode）</a></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>找出字符串中第一个只出现一次的字符。</p><h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><p>通过一个 LinkedHashMap 来保存字符对是否只出现一次的映射，遍历后返回第一个只出现一次的字符。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>一个 map 来保存所有字符对是否只出现一次的映射。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Character, Boolean&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h2 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO Solution</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ZFiend</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2023.01.23 16:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">firstUniqChar</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Map&lt;Character, Boolean&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : chars) &#123;</span><br><span class="line">            map.put(c, !map.containsKey(c));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Character key : map.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.get(key)) <span class="keyword">return</span> key;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-11-旋转数组的最小数字"><a href="#剑指-Offer-11-旋转数组的最小数字" class="headerlink" title="剑指 Offer 11. 旋转数组的最小数字"></a>剑指 Offer 11. 旋转数组的最小数字</h1><p><a href="https://leetcode.cn/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/description/">剑指 Offer 11. 旋转数组的最小数字 - 力扣（Leetcode）</a></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>一个递增的有序数组经过多次的区间旋转。</p><h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><p>通过一次遍历出结果，如果第 i 个元素比第 i - 1 个元素小，则将第 i 个元素与目前的最小值比较，计算新的最小值，最后返回最小值。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>无额外数据结构。</p><h2 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO Solution</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ZFiend</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2023.01.23 16:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minArray</span><span class="params">(<span class="type">int</span>[] numbers)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] &lt; numbers[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                min = min &lt; numbers[i] ? min : numbers[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-04-二维数组中的查找"><a href="#剑指-Offer-04-二维数组中的查找" class="headerlink" title="剑指 Offer 04. 二维数组中的查找"></a>剑指 Offer 04. 二维数组中的查找</h1><p><a href="https://leetcode.cn/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/description/">剑指 Offer 04. 二维数组中的查找 - 力扣（Leetcode）</a></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>在一个 n * m 每一行每一列都是递增的二维数组中判断 target 是否存在。</p><h2 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h2><p>将二维数组逆时针转45°，转换成类似<strong>二叉搜索树</strong>的形式，通过 i 和 j 的增减来查找 target，左分支元素更小，右分支元素更大。</p><p><img src="/image/offer04/1674469523658.png" alt="1674469523658"></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>无额外数据结构。</p><h2 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO Solution</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ZFiend</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2023.01.23 15:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">findNumberIn2DArray</span><span class="params">(<span class="type">int</span>[][] matrix, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix.length == <span class="number">0</span> || matrix[<span class="number">0</span>].length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> matrix[<span class="number">0</span>].length - <span class="number">1</span>, r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[r][l] &gt; target) &#123;</span><br><span class="line">                <span class="keyword">if</span> (l == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">                l--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (matrix[r][l] &lt; target) &#123;</span><br><span class="line">                <span class="keyword">if</span> (r == matrix.length - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                r++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-03-数组中重复的数字"><a href="#剑指-Offer-03-数组中重复的数字" class="headerlink" title="剑指 Offer 03. 数组中重复的数字"></a>剑指 Offer 03. 数组中重复的数字</h1><p><a href="https://leetcode.cn/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/description/">剑指 Offer 03. 数组中重复的数字 - 力扣（Leetcode）</a></p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>找出数组中一个重复的元素并返回。</p><h2 id="1-利用辅助-Set"><a href="#1-利用辅助-Set" class="headerlink" title="1.利用辅助 Set"></a>1.利用辅助 Set</h2><h3 id="详细分析"><a href="#详细分析" class="headerlink" title="详细分析"></a>详细分析</h3><p>通过辅助 set 来记录数组中每一个值，若有重复则立即返回</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>一个辅助 Set 对象来存数组元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h3 id="Java-代码实现"><a href="#Java-代码实现" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h3><p>这里使用数组更加快速高效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO Solution</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ZFiend</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2023.01.20 22:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRepeatNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] map = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100000</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map[num] &gt; <span class="number">0</span>) <span class="keyword">return</span> num;</span><br><span class="line">            map[num]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-原地交换"><a href="#2-原地交换" class="headerlink" title="2.原地交换"></a>2.原地交换</h2><h3 id="详细分析-1"><a href="#详细分析-1" class="headerlink" title="详细分析"></a>详细分析</h3><p>因为本题的特殊性，数组元素大小为[0, n - 1]，数组大小为 n，则可以通过在原数组中使用将下标与值一一对应的方式来判断是否有多余的数，有则直接返回该数。</p><h3 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构"></a>数据结构</h3><p>本地修改，无多余数据结构。</p><h3 id="Java-代码实现-1"><a href="#Java-代码实现-1" class="headerlink" title="Java 代码实现"></a>Java 代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO Solution</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> ZFiend</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2023.01.20 23:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findRepeatNumber</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; nums.length) &#123;</span><br><span class="line"><span class="comment">// 若当前 i 与 nums[i] 相同，则移动到下一位</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] == i) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 若当前 i 与 nums[i] 不相同，则意味着需要将 nums[i] 移动到对应的nums[nums[i]]的位置</span></span><br><span class="line"><span class="comment">// 若对应位置以及存在相同的数，则直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] == nums[nums[i]]) <span class="keyword">return</span> nums[i];</span><br><span class="line"><span class="comment">// 否则将nums[i]的值与nums[nums[i]]处的值互换，继续判断nums[i]的值是否等于 i</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">            nums[i] = nums[nums[i]];</span><br><span class="line">            nums[tmp] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终要保证所有的 i &#x3D; nums[i] 如果有冲突的则直接返回。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/16107.html"/>
      <url>/post/16107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
